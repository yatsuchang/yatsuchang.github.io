{"version":3,"sources":["services/leagueController.ts","pages/NewLeaguePage/components/NewLeagueForm/index.tsx","pages/NewLeaguePage/index.tsx","utils/fleek.ts"],"names":["LeagueControllerService","provider","signerAddress","addr","contract","this","signer","getSigner","ethers","Contract","LeagueControllerAbi","connect","address","data","a","createLeague","token","entryAmount","startTime","closeTime","maxChoiceNumber","expectLength","meta","transactionObject","console","log","hash","useStyles","makeStyles","theme","root","paddingBottom","form","marginTop","row","display","alignItems","marginLeft","date","position","color","colors","white","dateLabel","button","fontWeight","black","backgroundColor","transparentize","label","marginBottom","imagesRow","overflowX","imageItem","marginRight","height","minWidth","border","default","borderRadius","top","right","padding","choices","choiceInput","NewLeagueForm","props","classes","enqueueSnackbar","useSnackbar","useConnectedWeb3Context","setTxModalInfo","account","networkId","initialFormValues","external","banner","title","description","bannerFile","bannerObjectUrl","moment","format","className","initialValues","onSubmit","values","setSubmitting","unix","variant","index","length","uploadFileToFleekStorage","metaData","uploadDataToFleekStorage","JSON","stringify","metaUri","getTokenFromAddress","leagueData","parseUnits","toString","decimals","validationSchema","Yup","shape","matches","required","positive","errors","handleBlur","handleChange","handleSubmit","isSubmitting","isValid","setFieldValue","touched","TextField","error","Boolean","fullWidth","helperText","id","name","onBlur","onChange","placeholder","value","file","URL","revokeObjectURL","createObjectURL","size","width","fileUrl","multiline","select","Object","tokenIds","map","tokenId","getToken","MenuItem","Avatar","src","image","Typography","symbol","toUpperCase","type","Date","now","utc","InputLabelProps","shrink","event","total","Number","target","arr","push","choice","newChoices","e","eIndex","Button","disabled","fontSize","margin","NewLeaguePage","library","useState","formVisible","setFormVisible","controllerAddress","getContractAddress","leagueController","txId","waitForTransaction","message","useEffect","fleekStorage","upload","apiKey","FLEEK_STORAGE_API_KEY","apiSecret","FLEEK_STORAGE_API_SECRET","key","uploadedFile","publicUrl","Promise","resolve","reject","reader","FileReader","onload","dataUrl","result","onerror","readAsDataURL"],"mappings":"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","file":"static/js/9.ce52290d.chunk.js","sourcesContent":["import { BigNumber, Contract, Wallet, ethers } from \"ethers\";\nimport { ILeagueData, Maybe } from \"types\";\nimport LeagueControllerAbi from \"abis/LeagueController.json\";\n\nclass LeagueControllerService {\n  provider: any;\n  contract: Contract;\n\n  constructor(provider: any, signerAddress: Maybe<string>, addr: string) {\n    this.provider = provider;\n    if (signerAddress) {\n      const signer: Wallet = provider.getSigner();\n      this.contract = new ethers.Contract(\n        addr,\n        LeagueControllerAbi,\n        provider\n      ).connect(signer);\n    } else {\n      this.contract = new ethers.Contract(addr, LeagueControllerAbi, provider);\n    }\n  }\n\n  get address(): string {\n    return this.contract.address;\n  }\n\n  async createLeague(data: ILeagueData) {\n    const transactionObject = await this.contract.createLeague(\n      data.token,\n      data.entryAmount,\n      data.startTime,\n      data.closeTime,\n      data.maxChoiceNumber,\n      data.expectLength,\n      data.meta\n    );\n    console.log(`createLeague transaction hash: ${transactionObject.hash}`);\n    return transactionObject.hash;\n  }\n}\n\nexport { LeagueControllerService };\n","import {\n  Avatar,\n  Button,\n  IconButton,\n  makeStyles,\n  MenuItem,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport {\n  ILeagueData,\n  ILeagueFormData,\n  ILeagueMetadata,\n  KnownToken,\n} from \"types\";\nimport { tokenIds, getToken, getTokenFromAddress } from \"config/networks\";\nimport { Form, Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useSnackbar } from \"notistack\";\nimport { useConnectedWeb3Context } from \"contexts\";\nimport moment from \"moment-timezone\";\nimport { ImageUpload } from \"components\";\nimport {\n  uploadDataToFleekStorage,\n  uploadFileToFleekStorage,\n} from \"utils/fleek\";\nimport { BigNumber } from \"ethers\";\nimport { parseEther, parseUnits } from \"ethers/lib/utils\";\nimport { transparentize } from \"polished\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: { paddingBottom: 24 },\n  form: {\n    \"& > * + *\": {\n      marginTop: 16,\n    },\n  },\n  row: {\n    display: \"flex\",\n    alignItems: \"center\",\n    \"& > * + *\": {\n      marginLeft: 8,\n    },\n  },\n  date: {\n    position: \"relative\",\n\n    \"& svg\": {\n      color: theme.colors.white,\n    },\n  },\n  dateLabel: {\n    color: theme.colors.white,\n  },\n  button: {\n    \"& span\": {\n      fontWeight: 600,\n      color: theme.colors.black,\n    },\n    \"&:disabled\": {\n      backgroundColor: `${transparentize(0.8, theme.colors.white)} !important`,\n    },\n  },\n  label: {\n    color: theme.colors.white,\n    marginBottom: 5,\n  },\n  imagesRow: {\n    display: \"flex\",\n    overflowX: \"auto\",\n    paddingBottom: 12,\n  },\n  imageItem: {\n    marginRight: 12,\n    position: \"relative\",\n    \"& img\": {\n      height: 118,\n      minWidth: 120,\n      border: `1px dashed ${theme.colors.default}`,\n      borderRadius: 16,\n    },\n    \"& button\": {\n      position: \"absolute\",\n      top: 12,\n      right: 12,\n      padding: 8,\n      backgroundColor: theme.colors.black,\n      color: theme.colors.white,\n    },\n  },\n  choices: {\n    padding: \"0 12px\",\n    border: `1px solid ${theme.colors.white}`,\n    borderRadius: 4,\n  },\n  choiceInput: {marginTop: 8}\n}));\n\ninterface IProps {\n  onSubmit: (_: ILeagueData) => Promise<void>;\n}\n\nexport const NewLeagueForm = (props: IProps) => {\n  const classes = useStyles();\n\n  const { enqueueSnackbar } = useSnackbar();\n  const { setTxModalInfo, account, networkId } = useConnectedWeb3Context();\n\n  const initialFormValues: ILeagueFormData = {\n    external: \"\",\n    banner: \"\",\n    title: \"\",\n    description: \"\",\n    bannerFile: null,\n    bannerObjectUrl: \"\",\n    choices: [],\n\n    token: \"\",\n    entryAmount: 0,\n    startTime: moment().format(\"YYYY-MM-DDTHH:m\"),\n    closeTime: moment().format(\"YYYY-MM-DDTHH:m\"),\n\n    maxChoiceNumber: 0,\n    expectLength: 0,\n  };\n\n  return (\n    <div className={classes.root}>\n      <Formik\n        initialValues={initialFormValues}\n        onSubmit={async (values, { setSubmitting }) => {\n          const startTime = moment(values.startTime).unix();\n          const closeTime = moment(values.closeTime).unix();\n\n          if (startTime > closeTime) {\n            enqueueSnackbar(\"StartTime should be earlier than closeTime\", {\n              variant: \"error\",\n            });\n            return;\n          }\n          if (!values.bannerFile) {\n            enqueueSnackbar(\"Please select banner\", {\n              variant: \"error\",\n            });\n            return;\n          }\n\n          for (let index = 0; index < values.choices.length; index++) {\n            const element = values.choices[index];\n            if (element === \"\") {\n              enqueueSnackbar(\"Please fill choices\", {\n                variant: \"error\",\n              });\n              return;\n            }\n          }\n\n          setSubmitting(true);\n          setTxModalInfo(true, \"Uploading meta data to fleek ...\");\n\n          try {\n            const banner = await uploadFileToFleekStorage(values.bannerFile);\n\n            const metaData: ILeagueMetadata = {\n              external: values.external,\n              description: values.description,\n              title: values.title,\n              banner,\n              choices: values.choices,\n            };\n\n            console.log(\"===metaData===\", metaData);\n\n            const metaUri = await uploadDataToFleekStorage(\n              JSON.stringify(metaData)\n            );\n\n            console.log(\"====metaUri=====\", metaUri);\n\n            const token = getTokenFromAddress(values.token, networkId);\n\n            const leagueData: ILeagueData = {\n              meta: metaUri,\n              token: values.token,\n              entryAmount: parseUnits(\n                values.entryAmount.toString(),\n                token.decimals\n              ),\n              startTime: moment(values.startTime).unix(),\n              closeTime: moment(values.closeTime).unix(),\n              maxChoiceNumber: values.maxChoiceNumber,\n              expectLength: values.expectLength,\n            };\n            console.log(\"====leagueData====\", leagueData);\n\n            await props.onSubmit(leagueData);\n\n            setSubmitting(false);\n          } catch (error) {\n            setSubmitting(false);\n            setTxModalInfo(false);\n          }\n        }}\n        validationSchema={Yup.object().shape({\n          external: Yup.string().matches(/^(https)/),\n          title: Yup.string().required(),\n          description: Yup.string().required(),\n\n          token: Yup.string()\n            .matches(/^0x[a-fA-F0-9]{40}$/)\n            .required(),\n          startTime: Yup.string().required(),\n          closeTime: Yup.string().required(),\n\n          maxChoiceNumber: Yup.number().positive(),\n          expectLength: Yup.number().positive(),\n        })}\n      >\n        {({\n          errors,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n          isValid,\n          setFieldValue,\n          touched,\n          values,\n        }) => (\n          <Form className={classes.form} onSubmit={handleSubmit}>\n            <TextField\n              error={Boolean(touched.external && errors.external)}\n              fullWidth\n              helperText={touched.external && errors.external}\n              id=\"external\"\n              label=\"External Info Website\"\n              name=\"external\"\n              onBlur={handleBlur}\n              onChange={handleChange}\n              placeholder=\"https://\"\n              value={values.external}\n            />\n            <ImageUpload\n              id=\"banner-uploader\"\n              onChange={(file: File | null) => {\n                setFieldValue(\"bannerFile\", file);\n                if (values.bannerObjectUrl) {\n                  URL.revokeObjectURL(values.bannerObjectUrl);\n                }\n                if (file) {\n                  setFieldValue(\"bannerObjectUrl\", URL.createObjectURL(file));\n                } else {\n                  setFieldValue(\"bannerObjectUrl\", \"\");\n                }\n              }}\n              placeholder=\"Please upload Banner\"\n              size={{ width: 300, height: 300 }}\n              value={{\n                file: values.bannerFile,\n                fileUrl: values.bannerObjectUrl,\n              }}\n            />\n            <TextField\n              error={Boolean(touched.title && errors.title)}\n              fullWidth\n              helperText={touched.title && errors.title}\n              id=\"title\"\n              label=\"Title\"\n              name=\"title\"\n              onBlur={handleBlur}\n              onChange={handleChange}\n              placeholder=\"title\"\n              value={values.title}\n            />\n            <TextField\n              error={Boolean(touched.description && errors.description)}\n              fullWidth\n              helperText={touched.description && errors.description}\n              id=\"description\"\n              label=\"Description\"\n              multiline\n              name=\"description\"\n              onBlur={handleBlur}\n              onChange={handleChange}\n              placeholder=\"Description\"\n              value={values.description}\n            />\n\n            <TextField\n              error={Boolean(touched.token && errors.token)}\n              fullWidth\n              helperText={touched.token && errors.token}\n              id=\"token\"\n              label=\"Entry Token\"\n              name=\"token\"\n              onBlur={handleBlur}\n              onChange={handleChange}\n              select\n              value={values.token}\n            >\n              {Object.values(tokenIds).map((tokenId) => {\n                const token = getToken(tokenId as KnownToken, networkId);\n\n                return (\n                  <MenuItem key={tokenId} value={token.address}>\n                    <div className={classes.row}>\n                      <Avatar src={token.image} />\n                      <Typography>\n                        {token.name} ({token.symbol.toUpperCase()})\n                      </Typography>\n                    </div>\n                  </MenuItem>\n                );\n              })}\n            </TextField>\n            <TextField\n              error={Boolean(touched.entryAmount && errors.entryAmount)}\n              fullWidth\n              helperText={touched.entryAmount && errors.entryAmount}\n              id=\"entryAmount\"\n              label=\"Entry Token Amount\"\n              name=\"entryAmount\"\n              onBlur={handleBlur}\n              onChange={handleChange}\n              placeholder=\"0\"\n              type=\"number\"\n              value={values.entryAmount}\n            />\n            <TextField\n              className={classes.date}\n              error={Boolean(\n                touched.startTime &&\n                  moment(values.startTime).unix() * 1000 < Date.now()\n              )}\n              fullWidth\n              helperText={\n                (touched.startTime &&\n                  moment(values.startTime).unix() * 1000 < Date.now() &&\n                  \"You can't set Past Time\") ||\n                `${moment(values.startTime)\n                  .utc()\n                  .format(\"YYYY-MM-DD HH:mm\")} UTC (${moment(\n                  values.startTime\n                ).unix()})`\n              }\n              label=\"Start Time\"\n              id=\"startTime\"\n              name=\"startTime\"\n              type=\"datetime-local\"\n              value={values.startTime}\n              InputLabelProps={{\n                shrink: true,\n              }}\n              onBlur={handleBlur}\n              onChange={handleChange}\n            />\n            <TextField\n              className={classes.date}\n              error={Boolean(\n                touched.closeTime &&\n                  moment(values.closeTime).unix() * 1000 < Date.now()\n              )}\n              fullWidth\n              helperText={\n                (touched.closeTime &&\n                  moment(values.closeTime).unix() * 1000 < Date.now() &&\n                  \"You can't set Past Time\") ||\n                `${moment(values.closeTime)\n                  .utc()\n                  .format(\"YYYY-MM-DD HH:mm\")} UTC (${moment(\n                  values.closeTime\n                ).unix()})`\n              }\n              label=\"Close Time\"\n              id=\"closeTime\"\n              name=\"closeTime\"\n              type=\"datetime-local\"\n              value={values.closeTime}\n              InputLabelProps={{\n                shrink: true,\n              }}\n              onBlur={handleBlur}\n              onChange={handleChange}\n            />\n\n            <TextField\n              error={Boolean(touched.maxChoiceNumber && errors.maxChoiceNumber)}\n              fullWidth\n              id=\"maxChoiceNumber\"\n              label=\"Max Choice Number\"\n              name=\"maxChoiceNumber\"\n              onBlur={handleBlur}\n              onChange={(event) => {\n                handleChange(event);\n                const total = Number(event.target.value || \"0\");\n                const arr = [];\n                for (let index = 0; index < total; index++) {\n                  arr.push(values.choices[index] || \"\");\n                }\n                setFieldValue(\"choices\", arr);\n              }}\n              placeholder=\"0\"\n              type=\"number\"\n              value={values.maxChoiceNumber}\n            />\n            <TextField\n              error={Boolean(touched.expectLength && errors.expectLength)}\n              fullWidth\n              id=\"expectLength\"\n              label=\"Expect Select Count\"\n              name=\"expectLength\"\n              onBlur={handleBlur}\n              onChange={handleChange}\n              placeholder=\"0\"\n              type=\"number\"\n              value={values.expectLength}\n            />\n            <div className={classes.choices}>\n              <Typography className={classes.dateLabel}>Choices</Typography>\n              <br />\n              {values.choices.map((choice, index) => {\n                return (\n                  <TextField\n                    className={classes.choiceInput}\n                    fullWidth\n                    label={`Choice Name ${index + 1}`}\n                    onChange={(event) => {\n                      const newChoices = values.choices.map((e, eIndex) =>\n                        index === eIndex ? event.target.value : e\n                      );\n                      setFieldValue(\"choices\", newChoices);\n                    }}\n                    value={choice}\n                    key={`${index}`}\n                  />\n                );\n              })}\n            </div>\n            <Button\n              className={classes.button}\n              color=\"primary\"\n              disabled={!isValid || isSubmitting || !account}\n              fullWidth\n              type=\"submit\"\n              variant=\"contained\"\n            >\n              Submit\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { PageWrapper } from \"components\";\nimport { DEFAULT_NETWORK_ID } from \"config/constants\";\nimport { getContractAddress } from \"config/networks\";\nimport { useConnectedWeb3Context } from \"contexts\";\nimport { useSnackbar } from \"notistack\";\nimport { useEffect, useState } from \"react\";\nimport { IDOControllerService } from \"services/idoController\";\nimport { LeagueControllerService } from \"services/leagueController\";\nimport { IIDOData, ILeagueData } from \"types\";\nimport { NewLeagueForm } from \"./components\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  title: {\n    color: theme.colors.white,\n    fontSize: 24,\n    fontWeight: 600,\n    margin: \"16px 0\",\n  },\n}));\n\nconst NewLeaguePage = () => {\n  const classes = useStyles();\n  const {\n    account,\n    library: provider,\n    networkId,\n    setTxModalInfo,\n  } = useConnectedWeb3Context();\n  const { enqueueSnackbar } = useSnackbar();\n  const [formVisible, setFormVisible] = useState(true);\n\n  const onSubmit = async (data: ILeagueData) => {\n    if (!account || !provider || !networkId) {\n      return;\n    }\n    setTxModalInfo(true, \"Creating League...\");\n    try {\n      const controllerAddress = getContractAddress(\n        \"leagueController\",\n        networkId\n      );\n      const leagueController = new LeagueControllerService(\n        provider,\n        account,\n        controllerAddress\n      );\n      const txId = await leagueController.createLeague(data);\n      setTxModalInfo(true, \"Creating League...\", \"Please wait...\", txId);\n      await provider.waitForTransaction(txId);\n      setTxModalInfo(false);\n      setFormVisible(() => false);\n    } catch (error) {\n      console.error(error);\n      setTxModalInfo(false);\n      enqueueSnackbar(error.message || \"Something went wrong\", {\n        variant: \"error\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    console.log('[thomas][NewLeaguePage][useEffect][networkId] before setFormVisible(false)')\n    setFormVisible(false);\n    console.log('[thomas][NewLeaguePage][useEffect][networkId] after setFormVisible(false)')\n  }, [networkId]);\n\n  useEffect(() => {\n    console.log('[thomas][NewLeaguePage][useEffect][formVisible] start')\n    if (!formVisible) {\n      console.log('[thomas][NewLeaguePage][useEffect][formVisible] !formVisible')\n      setFormVisible(true);\n      console.log('[thomas][NewLeaguePage][useEffect][formVisible] after setFormVisible(true)')\n    }\n    console.log('[thomas][NewLeaguePage][useEffect][formVisible] end')\n  }, [formVisible]);\n\n  return (\n    <PageWrapper>\n      <Typography className={classes.title}>New League</Typography>\n      {formVisible && <NewLeagueForm onSubmit={onSubmit} />}\n    </PageWrapper>\n  );\n};\n\nexport default NewLeaguePage;\n","import fleekStorage from \"@fleekhq/fleek-storage-js\";\nimport {\n  FLEEK_STORAGE_API_KEY,\n  FLEEK_STORAGE_API_SECRET,\n} from \"config/constants\";\n\nexport const uploadDataToFleekStorage = async (data: any): Promise<string> => {\n  const uploadedFile = await fleekStorage.upload({\n    apiKey: FLEEK_STORAGE_API_KEY,\n    apiSecret: FLEEK_STORAGE_API_SECRET,\n    key: `${Date.now()}`,\n    data: data,\n  });\n  return uploadedFile.publicUrl;\n};\n\nexport const uploadFileToFleekStorage = (file: File): Promise<string> =>\n  new Promise((resolve, reject) => {\n    var reader = new FileReader();\n\n    reader.onload = async () => {\n      const dataUrl = reader.result;\n\n      try {\n        const uploadedFile = await fleekStorage.upload({\n          apiKey: FLEEK_STORAGE_API_KEY,\n          apiSecret: FLEEK_STORAGE_API_SECRET,\n          key: `${Date.now()}`,\n          data: dataUrl,\n        });\n\n        resolve(uploadedFile.publicUrl);\n      } catch (error) {\n        reject(error);\n      }\n    };\n\n    reader.onerror = () => {\n      reject(reader.error);\n    };\n\n    reader.readAsDataURL(file);\n  });\n"],"sourceRoot":""}